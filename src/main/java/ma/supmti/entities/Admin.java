package ma.supmti.entities;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.regex.Pattern;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.validator.constraints.Email;
import org.mindrot.jbcrypt.BCrypt;


import org.hibernate.Transaction;  

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.ManagedBean;
import javax.persistence.Id;
import javax.persistence.Table;



/**
 * Admin generated by hbm2java
 */

@Entity
@Table(name = "admin", catalog = "hibernate")
public class Admin implements java.io.Serializable {


	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer id;
	private String username;
	private String email;
	private String password;

	public Admin() {
	}

	public Admin(String username, String email, String password) {
		this.username = username;
		this.email = email;
		this.password = password;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "username", length = 20)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}
	
	@Column(name = "email", length = 50)

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", length = 255)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String pwd) {
		this.password = pwd;

 		}
	public String checkuser(){
		   try {
		      System.out.println("email "+email);
		      System.out.println("passowrd "+password);
		      System.out.print("PASS"+this.getPassword());
		      SessionFactory sessionFactory=new Configuration().configure().buildSessionFactory();
		      Session session=sessionFactory.openSession();
		      session.beginTransaction();
		      @SuppressWarnings("deprecation")
			Admin admin = (Admin)session.createQuery("from Admin where email = :email")
	                    .setString("email", email)
	                    .uniqueResult();     
		      boolean b = BCrypt.checkpw(password, admin.getPassword());
		      System.out.print("vaaaaaaaaaaaaaaaal"+b);
		      
		      if(BCrypt.checkpw(password, admin.getPassword())) {
		            return "success";
		      }else{
		            return "failed";
		      }
		    } catch (Exception e) {
		        System.out.println(e);
		    }
		    return "failed";
		   }
	 public String add() {
	        int i = 0;
	        try {
	        if (username != null) {
	        	
			      SessionFactory sessionFactory=new Configuration().configure().buildSessionFactory();
			      Session session=sessionFactory.openSession();
			      session.beginTransaction();
			      Query query = session.createQuery("insert into Admin(username,email,password) ");
			int result = query.executeUpdate();
			System.out.println("nombre de saisie "+result);
	                       
	                }
	            } catch (Exception e) {
	                System.out.println(e);
	            } finally {
	            }
	        if (i > 0) {
	            return "login";
	        } else
	            return "register";
	    }
	    
	    public static int register(Admin u){ 
	    	
	    	 int i=0;    
	    	  
	    	 StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();  
	    	 Metadata meta = new MetadataSources(ssr).getMetadataBuilder().build();  
	    	  
	    	SessionFactory factory = meta.getSessionFactoryBuilder().build();  
	    	Session session = factory.openSession();  
	    	Transaction t = session.beginTransaction();   
	    	
	    	 u.setPassword(BCrypt.hashpw(u.password, BCrypt.gensalt()));

	    	i=(Integer)session.save(u);    
	    	t.commit();    
	    	session.close();    
	    	    
	    	return i;    
	    	   
	    	 }  
        	    public String register_admin() {

	    	System.out.println("your account is added successfully");
	    	if(Admin.register(this)>0) {
	    		return "login";
	    	}else {
	    		return "register";
	    	}
        	    }
        	   
        	    
                    
           
		 }



